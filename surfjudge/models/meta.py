# -*- coding: utf-8 -*-
"""
    Copyright (c) 2018 Dario Götz and Jörg Christian Reiher.
    All rights reserved.
"""

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.schema import MetaData

# Recommended naming convention used by Alembic, as various different database
# providers will autogenerate vastly different names making migrations more
# difficult. See: http://alembic.zzzcomputing.com/en/latest/naming.html
NAMING_CONVENTION = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    # "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
}

metadata = MetaData(naming_convention=NAMING_CONVENTION)


# constructor function that discards unknown kwargs
def init_func(self, *args, **kwargs):
    for col in self.__table__.columns.keys():
        setattr(self, col, kwargs.get(col))


# Base class that implements convenience functions for db orm objects
class SQLBase(object):
    def __json__(self, request):
        """Convert the sqlalchemy ORM object to a dictionary,
        deleting the autogenerated field "_sa_instance_state"
        """
        # subclasses shall use a set __json_exclude__ to additionally exclude attributes
        json_exclude = getattr(self, '__json_exclude__', set())
        return { key: value for key, value in self.__dict__.items()
                if not key.startswith('_')
                and key not in json_exclude}

# base class for all surfjudge ORM objects
Base = declarative_base(cls=SQLBase, metadata=metadata, constructor=init_func)
